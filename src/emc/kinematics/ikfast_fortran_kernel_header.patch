diff -cr linux-headers-2.6.32-122/Makefile linux-headers-2.6.32-122.bak/Makefile
*** linux-headers-2.6.32-122/Makefile	2010-07-28 03:37:34.000000000 +1000
--- linux-headers-2.6.32-122.bak/Makefile	2013-12-04 08:06:50.834311473 +1100
***************
*** 221,226 ****
--- 221,227 ----
  
  HOSTCC       = gcc
  HOSTCXX      = g++
+ HOSTFORTRAN  = gfortran
  HOSTCFLAGS   = -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer
  HOSTCXXFLAGS = -O2
  
***************
*** 307,312 ****
--- 308,315 ----
  AS		= $(CROSS_COMPILE)as
  LD		= $(CROSS_COMPILE)ld
  CC		= $(CROSS_COMPILE)gcc
+ CXX		= $(CROSS_COMPILE)g++
+ FORTRAN = $(CROSS_COMPILE)gfortran
  CPP		= $(CC) -E
  AR		= $(CROSS_COMPILE)ar
  NM		= $(CROSS_COMPILE)nm
***************
*** 362,368 ****
  KERNELVERSION = $(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
  
  export VERSION PATCHLEVEL SUBLEVEL KERNELRELEASE KERNELVERSION
! export ARCH SRCARCH CONFIG_SHELL HOSTCC HOSTCFLAGS CROSS_COMPILE AS LD CC
  export CPP AR NM STRIP OBJCOPY OBJDUMP
  export MAKE AWK GENKSYMS INSTALLKERNEL PERL UTS_MACHINE
  export HOSTCXX HOSTCXXFLAGS LDFLAGS_MODULE CHECK CHECKFLAGS
--- 365,371 ----
  KERNELVERSION = $(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
  
  export VERSION PATCHLEVEL SUBLEVEL KERNELRELEASE KERNELVERSION
! export ARCH SRCARCH CONFIG_SHELL HOSTCC HOSTCFLAGS CROSS_COMPILE AS LD CC CXX FORTRAN HOSTFORTRAN
  export CPP AR NM STRIP OBJCOPY OBJDUMP
  export MAKE AWK GENKSYMS INSTALLKERNEL PERL UTS_MACHINE
  export HOSTCXX HOSTCXXFLAGS LDFLAGS_MODULE CHECK CHECKFLAGS
diff -cr linux-headers-2.6.32-122/scripts/Makefile.build linux-headers-2.6.32-122.bak/scripts/Makefile.build
*** linux-headers-2.6.32-122/scripts/Makefile.build	2010-05-20 05:08:51.000000000 +1000
--- linux-headers-2.6.32-122.bak/scripts/Makefile.build	2013-12-04 10:20:33.038812769 +1100
***************
*** 229,234 ****
--- 229,283 ----
  	$(call cmd,force_checksrc)
  	$(call if_changed_rule,cc_o_c)
  
+ 
+ # C++ (.cpp) files
+ # The C++ file is compiled and updated dependency information is generated.
+ # (See cmd_cc_o_cxx + relevant part of rule_cc_o_cxx)
+ 
+ # No support for module versioning for c++ (for now)
+ quiet_cmd_cc_o_cxx = C++ $(quiet_modtag) $@
+       cmd_cc_o_cxx = $(CXX) $(cxx_flags) -c -o $@ $<
+ 
+ define rule_cc_o_cxx
+ 	$(if $($(quiet)cmd_checksrc),echo '  $($(quiet)cmd_checksrc)';)   \
+ 	$(if $($(quiet)cmd_cc_o_cxx), \
+ 		echo '  $(subst ','\'',$($(quiet)cmd_cc_o_cxx))';)        \
+ 	$(cmd_cc_o_cxx);						  \
+ 	scripts/basic/fixdep $(depfile) $@ '$(subst ','\'',$(cmd_cc_o_cxx))' \
+ 		> $(@D)/.$(@F).tmp; \
+ 	rm -f $(depfile);						  \
+ 	mv -f $(@D)/.$(@F).tmp $(@D)/.$(@F).cmd
+ endef
+ 
+ %.o: %.cpp FORCE
+ 	$(call if_changed_rule,cc_o_cxx)
+ 
+ # Built-in and composite module parts
+ 
+ # No support for module versioning for fortran (for now)
+ quiet_cmd_cc_o_fortran = FORTRAN $(quiet_modtag) $@
+       cmd_cc_o_fortran = $(FORTRAN) $(fortran_flags) -c -o $@ $<
+ 
+ define rule_cc_o_fortran
+ 	$(if $($(quiet)cmd_checksrc),echo '  $($(quiet)cmd_checksrc)';)   \
+ 	$(if $($(quiet)cmd_cc_o_fortran),\
+ 		echo '  $(subst ','\'',$($(quiet)cmd_cc_o_fortran))';)        \
+ 	$(cmd_cc_o_fortran);						  \
+ 	echo $@: $< > $(depfile); \
+ 	scripts/basic/fixdep $(depfile) $@ '$(subst ','\'',$(cmd_cc_o_fortran))' \
+ 		> $(@D)/.$(@F).tmp; \
+ 	rm -f $(depfile);						  \
+ 	mv -f $(@D)/.$(@F).tmp $(@D)/.$(@F).cmd
+ endef
+ 
+ %.o: %.f FORCE
+ 	$(call if_changed_rule,cc_o_fortran)
+ 
+ #
+ # Single-part modules are special since we need to mark them in $(MODVERDIR)
+ # Also we do not support C++ single-file modules
+ 
+ 
  # Single-part modules are special since we need to mark them in $(MODVERDIR)
  
  $(single-used-m): $(obj)/%.o: $(src)/%.c FORCE
diff -cr linux-headers-2.6.32-122/scripts/Makefile.lib linux-headers-2.6.32-122.bak/scripts/Makefile.lib
*** linux-headers-2.6.32-122/scripts/Makefile.lib	2010-05-20 05:08:51.000000000 +1000
--- linux-headers-2.6.32-122.bak/scripts/Makefile.lib	2013-12-10 08:45:56.365530189 +1100
***************
*** 3,8 ****
--- 3,9 ----
  ccflags-y  += $(EXTRA_CFLAGS)
  cppflags-y += $(EXTRA_CPPFLAGS)
  ldflags-y  += $(EXTRA_LDFLAGS)
+ fotranflags-y  += $(EXTRA_FORTRANFLAGS)
  
  #
  # flags that take effect in sub directories
***************
*** 115,120 ****
--- 116,123 ----
  _a_flags       = $(KBUILD_CPPFLAGS) $(KBUILD_AFLAGS) $(KBUILD_SUBDIR_ASFLAGS) \
                   $(asflags-y) $(AFLAGS_$(basetarget).o)
  _cpp_flags     = $(KBUILD_CPPFLAGS) $(cppflags-y) $(CPPFLAGS_$(@F))
+ _fortran_flags  = $(KBUILD_CPPFLAGS) $(KBUILD_SUBDIR_CCFLAGS) \
+                  $(KBUILD_FORTRANFLAGS) $(FORTRANFLAGS_$(basetarget).o)
  
  #
  # Enable gcov profiling flags for a file, directory or for all files depending
***************
*** 134,139 ****
--- 137,143 ----
  __c_flags	= $(_c_flags)
  __a_flags	= $(_a_flags)
  __cpp_flags     = $(_cpp_flags)
+ __fortran_flags	= $(_fortran_flags)
  else
  
  # -I$(obj) locates generated .h files
***************
*** 143,148 ****
--- 147,153 ----
  __c_flags	= $(call addtree,-I$(obj)) $(call flags,_c_flags)
  __a_flags	=                          $(call flags,_a_flags)
  __cpp_flags     =                          $(call flags,_cpp_flags)
+ __fortran_flags     =                  $(call flags,_fortran_flags)
  endif
  
  c_flags        = -Wp,-MD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE)     \
***************
*** 156,161 ****
--- 161,180 ----
  cpp_flags      = -Wp,-MD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE)     \
  		 $(__cpp_flags)
  
+ fortran_flags = -Wp,-MD,$(depfile)    \
+          $(__fortran_flags)            \
+          -D"KBUILD_STR(s)=\#s" $(basename_flags) $(modname_flags) \
+           $(debug_flags) -nostdinc -D__KERNEL__ -Wall -O2 -m32 -msoft-float  \
+           -mregparm=3 -freg-struct-return -mpreferred-stack-boundary=2 -march=i586  \
+           -mtune=generic -maccumulate-outgoing-args  -Wa,-mtune=generic32  -fstack-protector  \
+           -DCONFIG_AS_CFI=1  -DCONFIG_AS_CFI_SIGNAL_FRAME=1  -pipe  -fno-asynchronous-unwind-tables  \
+           -mno-sse  -mno-mmx  -mno-sse2  -mno-3dnow  -Wframe-larger-than=1024  -fno-omit-frame-pointer  \
+           -fno-optimize-sibling-calls  -pg  -fno-strict-overflow  -fno-dwarf2-cfi-asm  -fconserve-stack  \
+           -D_FORTIFY_SOURCE=0  -mhard-float  -DRTAI=3  -DRTAPI  -D_GNU_SOURCE  -Drealtime  \
+           -D_FORTIFY_SOURCE=2 -D__MODULE__ -DSEQUENTIAL_SUPPORT -DHAL_SUPPORT -DDYNAMIC_PLCSIZE \
+           -DRT_SUPPORT -DOLD_TIMERS_MONOS_SUPPORT -DMODBUS_IO_MASTER -fno-fast-math -mieee-fp \
+           -fno-unsafe-math-optimizations -Wframe-larger-than=2560 -DMODULE 
+ 
  ld_flags       = $(LDFLAGS) $(ldflags-y)
  
  # Finds the multi-part object the current object will be linked into
