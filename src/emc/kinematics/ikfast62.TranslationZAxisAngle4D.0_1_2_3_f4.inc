/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// C version for linuxcnc adapted by \author Frank Tkalcevic
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 62 generated on 2013-12-13 06:41:38.120973
///
///    /usr/local/bin/openrave.py --database inversekinematics --robot=../simple.robot.xml --iktype=TranslationZAxisAngle4D --freejoint=WristR --outputlang=c 
///
/// To compile with gcc:
///     gcc ik.c -lm
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp

#define IKFAST_HAS_LIBRARY
#define IKFAST_NUM_DOF 4
#define IKFAST_NUM_JOINTS 5
#define IKFAST_NUM_FREE_VARS 1

// For a standalone binary
#ifndef IKFAST_NO_MAIN
    #define j0 math_h_j0
    #define j1 math_h_j1

    #include <math.h>
    #include <complex.h>
    #include <stdlib.h>
    #include <stdio.h>

    #undef j0
    #undef j1

    #define rtapi_exit  exit
    #define rtapi_print printf
#endif

#include "ikfast_c.h" // found inside share/openrave-X.Y/python/ikfast_c.h

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==62);

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { rtapi_print( "ikfast exception: " __FILE__ ":" IKFAST_STRINGIZE(__LINE__) ": " IKFAST_STRINGIZE(_PRETTY_FUNCTION__) ": Assertion '"  #b "' failed" ); rtapi_exit(-1); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
void zgetrf_ (const int* m, const int* n, double complex * a, const int* lda, int* ipiv, int* info);
void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);


inline double IKabs(double f) { return fabs(f); }

inline double IKsqr(double f) { return f*f; }

inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline double IKsin(double f) { return sin(f); }
inline double IKcos(double f) { return cos(f); }
inline double IKtan(double f) { return tan(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}


inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

// Forward declaration even if they aren't used
static inline void polyroots1(IkReal rawcoeffs[1+1], IkReal rawroots[1], int *numroots );
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int *numroots );
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int *numroots );
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int *numroots );
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int *numroots );
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int *numroots );
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int *numroots );
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int *numroots );


static const struct JointInfo
{
    double limitMin;
    double limitMax;
} JointInfo[] =
{
{ .limitMin=-180.0, .limitMax=180.0 },
{ .limitMin=-130.0, .limitMax=136.0 },
{ .limitMin=-126.0, .limitMax=156.0 },
{ .limitMin=-130.0, .limitMax=157.0 },
{ .limitMin=-180.0, .limitMax=180.0 },
};
static IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
static unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;


static inline bool checkconsistency12(const IkReal* Breal)
{
    IkReal norm = 0.1;
    int i;
    for(i = 0; i < 11; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-6*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[0]-Breal[1]) < tol && IKabs(Breal[0]*Breal[2]-Breal[3]) < tol && IKabs(Breal[1]*Breal[2]-Breal[4]) < tol && IKabs(Breal[2]*Breal[2]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol && IKabs(Breal[1]*Breal[5]-Breal[7]) < tol && IKabs(Breal[2]*Breal[5]-Breal[8]) < tol && IKabs(Breal[0]*Breal[8]-Breal[9]) < tol && IKabs(Breal[1]*Breal[8]-Breal[10]) < tol;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly12qep(const IkReal* matcoeffs, IkReal* rawroots, int *numroots)
{
    const IkReal tol = 128.0*DBL_EPSILON;
    static IkReal IKFAST_ALIGNED16(M[24*24]);
    memset( M, 0, sizeof(M) );
    static IkReal IKFAST_ALIGNED16(A[12*12]);
    static IkReal IKFAST_ALIGNED16(work[24*24*23]);
    int ipiv[12];
    int info, coeffindex;
    const int worksize=24*24*23;
    const int matrixdim = 12;
    const int matrixdim2 = 24;
    *numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    int j,k;
    for(j = 0; j < 6; ++j) {
        for(k = 0; k < 9; ++k) {
            M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -matcoeffs[coeffindex++];
        }
    }
    for(j = 0; j < 6; ++j) {
        for(k = 0; k < 9; ++k) {
            M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(j = 0; j < 6; ++j) {
        for(k = 0; k < 9; ++k) {
            A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = matcoeffs[coeffindex++];
        }
        for(k = 0; k < 3; ++k) {
            A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
        }
    }
    static const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(j = 0; j < 6; ++j) {
            for(k = 0; k < 9; ++k) {
                IkReal a = matcoeffs[coeffindex+108], b = matcoeffs[coeffindex+54], c = matcoeffs[coeffindex];
                A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(k = 0; k < 3; ++k) {
                A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    static IkReal IKFAST_ALIGNED16(wr[24]);
    static IkReal IKFAST_ALIGNED16(wi[24]);
    static IkReal IKFAST_ALIGNED16(vr[24*24]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    int i;
    for(i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency12(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[(*numroots)++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[(*numroots)++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[3]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[(*numroots)++] = ev[3]/ev[0];
                    rawroots[(*numroots)++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[(*numroots)++] = ev[5]/ev[2];
                    rawroots[(*numroots)++] = ev[2]/ev[1];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[(*numroots)++] = ev[9]/ev[6];
                    rawroots[(*numroots)++] = ev[10]/ev[9];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[(*numroots)++] = ev[11]/ev[8];
                    rawroots[(*numroots)++] = ev[11]/ev[10];
                }
            }
        }
    }
}/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
int dummyiter;
for(dummyiter = 0; dummyiter < 1; ++dummyiter) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[2]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[0]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=(((IkReal)(0.0700000000000000))*(x3));
x9=(((IkReal)(0.120000000000000))*(x3));
x10=(((IkReal)(1.00000000000000))*(x3));
x11=(((IkReal)(0.120000000000000))*(x0));
x12=(((IkReal)(0.120000000000000))*(x5));
x13=(((IkReal)(0.0700000000000000))*(x0));
x14=((x1)*(x4));
x15=((x4)*(x5));
x16=((x1)*(x2));
x17=((x0)*(x4));
x18=(((IkReal)(0.0700000000000000))*(x1)*(x5));
eetrans[0]=((((x6)*(((((x17)*(x8)))+(((x13)*(x16)))))))+(((x17)*(x9)))+(((x7)*(((((x0)*(x2)*(x8)))+((((IkReal)(-1.00000000000000))*(x13)*(x14)))))))+(((x1)*(x11)))+(((x11)*(x16))));
IkReal x19=(((IkReal)(0.0700000000000000))*(x5));
eetrans[1]=((((x6)*(((((x16)*(x19)))+(((x15)*(x8)))))))+(((x12)*(x16)))+(((x7)*((((((IkReal)(-1.00000000000000))*(x14)*(x19)))+(((x2)*(x5)*(x8)))))))+(((x1)*(x12)))+(((x15)*(x9))));
eetrans[2]=(((IkReal)(0.169900000000000))+(x9)+(((x2)*(x9)))+(((x7)*((((((IkReal)(-1.00000000000000))*(x4)*(x8)))+((((IkReal)(-0.0700000000000000))*(x16)))))))+((((IkReal)(-0.120000000000000))*(x14)))+(((x6)*(((((x2)*(x8)))+((((IkReal)(-0.0700000000000000))*(x14))))))));
if( (((((x6)*(((((x10)*(x2)))+((((IkReal)(-1.00000000000000))*(x14)))))))+(((x7)*((((((IkReal)(-1.00000000000000))*(x16)))+((((IkReal)(-1.00000000000000))*(x10)*(x4))))))))) < -1-IKFAST_SINCOS_THRESH || (((((x6)*(((((x10)*(x2)))+((((IkReal)(-1.00000000000000))*(x14)))))))+(((x7)*((((((IkReal)(-1.00000000000000))*(x16)))+((((IkReal)(-1.00000000000000))*(x10)*(x4))))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
eerot[0]=IKacos(((((x6)*(((((x10)*(x2)))+((((IkReal)(-1.00000000000000))*(x14)))))))+(((x7)*((((((IkReal)(-1.00000000000000))*(x16)))+((((IkReal)(-1.00000000000000))*(x10)*(x4)))))))));
return;
}
IKFAST_ASSERT(0);
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {4}; return freeparams; }
IKFAST_API int GetNumJoints() { return IKFAST_NUM_JOINTS; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x4400000d; }

int ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionList * solutions) {
j0=NAN; _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=NAN; _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=NAN; _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=NAN; _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0; 
int dummyiter;
for(dummyiter = 0; dummyiter < 1; ++dummyiter) {
    IkSolutionList_Clear(solutions);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

j4=pfree[0]; cj4=cos(pfree[0]); sj4=sin(pfree[0]);
r00 = eerot[0];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_px=px;
new_py=py;
new_pz=pz;
new_r00=r00;
r00 = new_r00; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs((((IkReal)(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x20=IKatan2((((IkReal)(-1.00000000000000))*(py)), px);
j0array[0]=(((IkReal)(-1.00000000000000))*(x20));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=(((IkReal)(3.14159265358979))+((((IkReal)(-1.00000000000000))*(x20))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
int ij0;
for(ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
int iij0;
for(iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

static IkReal op[162], zeror[48];
int numroots;
IkReal x21=(((IkReal)(0.579800000000000))*(pz));
IkReal x22=(((IkReal)(1.00000000000000))*(pp));
IkReal x23=(((IkReal)(-0.479900000000000))+(pz));
IkReal x24=(((IkReal)(-0.339900000000000))+(pz));
IkReal x25=IKcos(j0);
IkReal x26=IKsin(j0);
IkReal x27=(((IkReal)(1.00000000000000))*(pz));
IkReal x28=(((IkReal)(0.679600000000000))+((((IkReal)(-4.00000000000000))*(pz))));
IkReal x29=(((IkReal)(0.0998000000000000))*(pz));
IkReal x30=(((IkReal)(0.239900000000000))+((((IkReal)(-1.00000000000000))*(x27))));
IkReal x31=(((IkReal)(0.0999000000000000))+((((IkReal)(-1.00000000000000))*(x27))));
IkReal x32=(((IkReal)(-0.140100000000000))+((((IkReal)(-1.00000000000000))*(x27))));
IkReal x33=(((IkReal)(-0.000100000000000000))+((((IkReal)(-1.00000000000000))*(x27))));
IkReal x34=(((IkReal)(-0.239900000000000))+(pz));
IkReal x35=(((IkReal)(-0.0999000000000000))+(pz));
IkReal x36=(((IkReal)(1.00000000000000))*(IKcos(r00)));
IkReal x37=(((IkReal)(-1.00000000000000))+((((IkReal)(-1.00000000000000))*(x36))));
IkReal x38=(((IkReal)(1.00000000000000))+((((IkReal)(-1.00000000000000))*(x36))));
IkReal x39=(((IkReal)(-0.339800000000000))+((((IkReal)(2.00000000000000))*(pz))));
IkReal x40=((px)*(x25));
IkReal x41=((py)*(x26));
IkReal x42=(((IkReal)(-0.0239660100000000))+((((IkReal)(0.339800000000000))*(pz)))+((((IkReal)(-1.00000000000000))*(x22))));
IkReal x43=((x40)+(x41));
IkReal x44=(((((IkReal)(2.00000000000000))*(x40)))+((((IkReal)(2.00000000000000))*(x41))));
IkReal x45=(((((IkReal)(-1.00000000000000))*(x41)))+((((IkReal)(-1.00000000000000))*(x40))));
IkReal x46=(((((IkReal)(0.480000000000000))*(x40)))+((((IkReal)(0.480000000000000))*(x41))));
IkReal x47=(((IkReal)(-1.00000000000000))*(x44));
op[0]=(((IkReal)(-0.0479420100000000))+(x21)+((((IkReal)(-1.00000000000000))*(x22))));
op[1]=(IkReal)(0);
op[2]=(((IkReal)(-0.0815420100000000))+(x21)+((((IkReal)(-1.00000000000000))*(x22))));
op[3]=(IkReal)(0);
op[4]=(IkReal)(0);
op[5]=(IkReal)(0);
op[6]=(IkReal)(0);
op[7]=(IkReal)(0);
op[8]=(IkReal)(0);
op[9]=(((IkReal)(-0.163118010000000))+((((IkReal)(0.819800000000000))*(pz)))+((((IkReal)(-1.00000000000000))*(x22))));
op[10]=(IkReal)(0);
op[11]=(IkReal)(0);
op[12]=x46;
op[13]=(IkReal)(0);
op[14]=(IkReal)(0);
op[15]=x42;
op[16]=(IkReal)(0);
op[17]=(IkReal)(0);
op[18]=x23;
op[19]=(IkReal)(0);
op[20]=x24;
op[21]=(IkReal)(0);
op[22]=(IkReal)(0.280000000000000);
op[23]=(IkReal)(0);
op[24]=x35;
op[25]=(IkReal)(0);
op[26]=x34;
op[27]=x38;
op[28]=(IkReal)(0);
op[29]=x37;
op[30]=(IkReal)(0);
op[31]=(IkReal)(-4.00000000000000);
op[32]=(IkReal)(0);
op[33]=x37;
op[34]=(IkReal)(0);
op[35]=x38;
op[36]=x23;
op[37]=(IkReal)(0);
op[38]=x24;
op[39]=x44;
op[40]=(IkReal)(0);
op[41]=x44;
op[42]=x31;
op[43]=(IkReal)(0);
op[44]=x30;
op[45]=x45;
op[46]=(IkReal)(0.140000000000000);
op[47]=x45;
op[48]=(IkReal)(0.380000000000000);
op[49]=(IkReal)(0);
op[50]=(IkReal)(0.100000000000000);
op[51]=x45;
op[52]=(IkReal)(-0.140000000000000);
op[53]=x45;
op[54]=x46;
op[55]=(IkReal)(0);
op[56]=x46;
op[57]=(IkReal)(0);
op[58]=(IkReal)(0);
op[59]=(IkReal)(0);
op[60]=(IkReal)(0);
op[61]=(IkReal)(0);
op[62]=(IkReal)(0);
op[63]=(((((IkReal)(0.960000000000000))*(x40)))+((((IkReal)(0.960000000000000))*(x41))));
op[64]=(IkReal)(0);
op[65]=(IkReal)(0);
op[66]=(((IkReal)(0.163104000000000))+((((IkReal)(-0.960000000000000))*(pz))));
op[67]=(IkReal)(0);
op[68]=(IkReal)(0);
op[69]=(IkReal)(0);
op[70]=(IkReal)(0);
op[71]=(IkReal)(0);
op[72]=x44;
op[73]=(IkReal)(0);
op[74]=x44;
op[75]=(IkReal)(0);
op[76]=(IkReal)(0);
op[77]=(IkReal)(0);
op[78]=x44;
op[79]=(IkReal)(0);
op[80]=x44;
op[81]=(IkReal)(0);
op[82]=(IkReal)(-4.00000000000000);
op[83]=(IkReal)(0);
op[84]=(IkReal)(-4.00000000000000);
op[85]=(IkReal)(0);
op[86]=(IkReal)(4.00000000000000);
op[87]=(IkReal)(0);
op[88]=(IkReal)(4.00000000000000);
op[89]=(IkReal)(0);
op[90]=x44;
op[91]=(IkReal)(0);
op[92]=x44;
op[93]=x28;
op[94]=(IkReal)(0);
op[95]=x28;
op[96]=x47;
op[97]=(IkReal)(0);
op[98]=x47;
op[99]=x39;
op[100]=(IkReal)(0);
op[101]=x39;
op[102]=(IkReal)(0);
op[103]=(IkReal)(0);
op[104]=(IkReal)(0);
op[105]=x39;
op[106]=(IkReal)(0);
op[107]=x39;
op[108]=(((IkReal)(0.0336099900000000))+(x29)+((((IkReal)(-1.00000000000000))*(x22))));
op[109]=(IkReal)(0);
op[110]=(((IkReal)(9.99000000000000e-6))+(x29)+((((IkReal)(-1.00000000000000))*(x22))));
op[111]=(IkReal)(0);
op[112]=(IkReal)(0);
op[113]=(IkReal)(0);
op[114]=(IkReal)(0);
op[115]=(IkReal)(0);
op[116]=(IkReal)(0);
op[117]=(((IkReal)(-1.40100000000000e-5))+((((IkReal)(-0.140200000000000))*(pz)))+((((IkReal)(-1.00000000000000))*(x22))));
op[118]=(IkReal)(0);
op[119]=(IkReal)(0);
op[120]=(((IkReal)(-1.00000000000000))*(x46));
op[121]=(IkReal)(0);
op[122]=(IkReal)(0);
op[123]=x42;
op[124]=(IkReal)(0);
op[125]=(IkReal)(0);
op[126]=x32;
op[127]=(IkReal)(0);
op[128]=x33;
op[129]=(IkReal)(0);
op[130]=(IkReal)(0.280000000000000);
op[131]=(IkReal)(0);
op[132]=x30;
op[133]=(IkReal)(0);
op[134]=x31;
op[135]=x37;
op[136]=(IkReal)(0);
op[137]=x38;
op[138]=(IkReal)(0);
op[139]=(IkReal)(4.00000000000000);
op[140]=(IkReal)(0);
op[141]=x38;
op[142]=(IkReal)(0);
op[143]=x37;
op[144]=x32;
op[145]=(IkReal)(0);
op[146]=x33;
op[147]=x47;
op[148]=(IkReal)(0);
op[149]=x47;
op[150]=x34;
op[151]=(IkReal)(0);
op[152]=x35;
op[153]=x43;
op[154]=(IkReal)(0.140000000000000);
op[155]=x43;
op[156]=(IkReal)(0.380000000000000);
op[157]=(IkReal)(0);
op[158]=(IkReal)(0.100000000000000);
op[159]=x43;
op[160]=(IkReal)(-0.140000000000000);
op[161]=x43;
solvedialyticpoly12qep(op,zeror,&numroots);
static IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
int ij1;
for(ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
j1array[numsolutions]=(((IkReal)(2.00000000000000))*(atan(htj1)));
j2array[numsolutions]=(((IkReal)(2.00000000000000))*(atan(htj2)));
j3array[numsolutions]=(((IkReal)(2.00000000000000))*(atan(htj3)));
IkReal x48=(htj1)*(htj1);
IkReal x49=(htj2)*(htj2);
IkReal x50=(htj3)*(htj3);
cj1array[numsolutions]=((((IKabs((((IkReal)(1.00000000000000))+(x48))) != 0)?((IkReal)1/((((IkReal)(1.00000000000000))+(x48)))):(IkReal)1.0e30))*((((IkReal)(1.00000000000000))+((((IkReal)(-1.00000000000000))*(x48))))));
cj2array[numsolutions]=((((IKabs((((IkReal)(1.00000000000000))+(x49))) != 0)?((IkReal)1/((((IkReal)(1.00000000000000))+(x49)))):(IkReal)1.0e30))*((((IkReal)(1.00000000000000))+((((IkReal)(-1.00000000000000))*(x49))))));
cj3array[numsolutions]=((((IKabs((((IkReal)(1.00000000000000))+(x50))) != 0)?((IkReal)1/((((IkReal)(1.00000000000000))+(x50)))):(IkReal)1.0e30))*((((IkReal)(1.00000000000000))+((((IkReal)(-1.00000000000000))*(x50))))));
sj1array[numsolutions]=(((IkReal)(2.00000000000000))*(htj1)*(((IKabs((((IkReal)(1.00000000000000))+((htj1)*(htj1)))) != 0)?((IkReal)1/((((IkReal)(1.00000000000000))+((htj1)*(htj1))))):(IkReal)1.0e30)));
sj2array[numsolutions]=(((IkReal)(2.00000000000000))*(htj2)*(((IKabs((((IkReal)(1.00000000000000))+((htj2)*(htj2)))) != 0)?((IkReal)1/((((IkReal)(1.00000000000000))+((htj2)*(htj2))))):(IkReal)1.0e30)));
sj3array[numsolutions]=(((IkReal)(2.00000000000000))*(htj3)*(((IKabs((((IkReal)(1.00000000000000))+((htj3)*(htj3)))) != 0)?((IkReal)1/((((IkReal)(1.00000000000000))+((htj3)*(htj3))))):(IkReal)1.0e30)));
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
int iij1;
for(iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

{
IkSingleDOFSolution vinfos[5];
IkSingleDOFSolution_Init( vinfos, 5 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 5, vfree, 0);
}
    }
}
}
}
return IkSolutionList_GetNumSolutions(solutions)>0;
}


IKFAST_API const char* GetKinematicsHash() { return "587828202130adcfd9bfdcd543fb17e2"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }


#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList solutions;
    IkSolutionList_Init( &solutions );
    IkReal vfree[IKFAST_NUM_FREE_VARS];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    size_t i = 0;
    for(i = 0; i < countof(vfree); ++i)
        vfree[i] = atof(argv[13+i]);
    int bSuccess = ComputeIk(eetrans, eerot, countof(vfree) > 0 ? vfree : NULL, &solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)IkSolutionList_GetNumSolutions(&solutions));
    IkReal solvalues[IKFAST_NUM_JOINTS];
    for(i = 0; i < IkSolutionList_GetNumSolutions(&solutions); ++i) 
    {
        int sol_count;
        int free_count;
        IkSolution * sol = IkSolutionList_GetSolution(&solutions, i);
        IkSolution_GetSolution(sol, solvalues, &sol_count, vfree);
        const int *vsolfree = IkSolution_GetFree( sol, &free_count );
        printf("sol%d (free=%d): ", i, free_count);
        size_t j = 0;
        for( j = 0; j < sol_count; ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
